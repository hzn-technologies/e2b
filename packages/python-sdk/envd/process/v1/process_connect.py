# Code generated by protoc-gen-connect-python 0.1.0.dev2, DO NOT EDIT.
from typing import Any, Generator

import connect

from envd.process.v1 import process_pb2 as envd_dot_process_dot_v1_dot_process__pb2

ProcessServiceName = "envd.process.v1.ProcessService"


class ProcessServiceClient:
    def __init__(self, base_url, *, pool=None, compressor=None, json=False, **opts):
        self._list_processes = connect.Client(
            pool=pool,
            url=f"{base_url}/{ProcessServiceName}/ListProcesses",
            response_type=envd_dot_process_dot_v1_dot_process__pb2.ListProcessesResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._reconnect_process = connect.Client(
            pool=pool,
            url=f"{base_url}/{ProcessServiceName}/ReconnectProcess",
            response_type=envd_dot_process_dot_v1_dot_process__pb2.ReconnectProcessResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._start_process = connect.Client(
            pool=pool,
            url=f"{base_url}/{ProcessServiceName}/StartProcess",
            response_type=envd_dot_process_dot_v1_dot_process__pb2.StartProcessResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._update_process = connect.Client(
            pool=pool,
            url=f"{base_url}/{ProcessServiceName}/UpdateProcess",
            response_type=envd_dot_process_dot_v1_dot_process__pb2.UpdateProcessResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._send_process_input_stream = connect.Client(
            pool=pool,
            url=f"{base_url}/{ProcessServiceName}/SendProcessInputStream",
            response_type=envd_dot_process_dot_v1_dot_process__pb2.SendProcessInputStreamResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._send_process_input = connect.Client(
            pool=pool,
            url=f"{base_url}/{ProcessServiceName}/SendProcessInput",
            response_type=envd_dot_process_dot_v1_dot_process__pb2.SendProcessInputResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._send_process_signal = connect.Client(
            pool=pool,
            url=f"{base_url}/{ProcessServiceName}/SendProcessSignal",
            response_type=envd_dot_process_dot_v1_dot_process__pb2.SendProcessSignalResponse,
            compressor=compressor,
            json=json,
            **opts
        )

    def list_processes(self, req: envd_dot_process_dot_v1_dot_process__pb2.ListProcessesRequest, **opts) -> envd_dot_process_dot_v1_dot_process__pb2.ListProcessesResponse:
        return self._list_processes.call_unary(req, **opts)

    def reconnect_process(self, req: envd_dot_process_dot_v1_dot_process__pb2.ReconnectProcessRequest , **opts) -> Generator[envd_dot_process_dot_v1_dot_process__pb2.ReconnectProcessResponse, Any, None]:
        return self._reconnect_process.call_server_stream(req, **opts)

    def start_process(self, req: envd_dot_process_dot_v1_dot_process__pb2.StartProcessRequest , **opts) -> Generator[envd_dot_process_dot_v1_dot_process__pb2.StartProcessResponse, Any, None]:
        return self._start_process.call_server_stream(req, **opts)

    def update_process(self, req: envd_dot_process_dot_v1_dot_process__pb2.UpdateProcessRequest, **opts) -> envd_dot_process_dot_v1_dot_process__pb2.UpdateProcessResponse:
        return self._update_process.call_unary(req, **opts)

    def send_process_input_stream(self, req: envd_dot_process_dot_v1_dot_process__pb2.SendProcessInputStreamRequest, **opts) -> envd_dot_process_dot_v1_dot_process__pb2.SendProcessInputStreamResponse:
        return self._send_process_input_stream.call_client_stream(req, **opts)

    def send_process_input(self, req: envd_dot_process_dot_v1_dot_process__pb2.SendProcessInputRequest, **opts) -> envd_dot_process_dot_v1_dot_process__pb2.SendProcessInputResponse:
        return self._send_process_input.call_unary(req, **opts)

    def send_process_signal(self, req: envd_dot_process_dot_v1_dot_process__pb2.SendProcessSignalRequest, **opts) -> envd_dot_process_dot_v1_dot_process__pb2.SendProcessSignalResponse:
        return self._send_process_signal.call_unary(req, **opts)
