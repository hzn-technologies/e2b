/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/envs": {
    /** @description List all environments */
    get: {
      parameters: {
        query: {
          api_key: components["parameters"]["apiKeyReq"];
        };
      };
      responses: {
        /** @description Successfully returned all environments */
        200: {
          content: {
            "application/json": components["schemas"]["Environment"][];
          };
        };
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
    /** @description Create a new environment */
    post: {
      parameters: {
        query: {
          api_key: components["parameters"]["apiKeyReq"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewEnvironment"];
        };
      };
      responses: {
        /** @description Successfully created an environment */
        200: {
          content: {
            "application/json": components["schemas"]["Environment"];
          };
        };
        400: components["responses"]["400"];
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
  };
  "/envs/{codeSnippetID}": {
    /** @description Create a new env for a code snippet */
    post: {
      parameters: {
        query: {
          api_key: components["parameters"]["apiKeyReq"];
        };
        path: {
          codeSnippetID: components["parameters"]["codeSnippetID"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewEnvironment"];
        };
      };
      responses: {
        /** @description Successfully created an environment */
        204: {
          content: never;
        };
        400: components["responses"]["400"];
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
    /** @description Delete the code snippet environment */
    delete: {
      parameters: {
        query: {
          api_key: components["parameters"]["apiKeyReq"];
        };
        path: {
          codeSnippetID: components["parameters"]["codeSnippetID"];
        };
      };
      responses: {
        /** @description Successfully deleted the environment */
        204: {
          content: never;
        };
        /** @description Cannot delete the environment */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
    /** @description Update the environment of the code snippet to match the edit environment */
    patch: {
      parameters: {
        query: {
          api_key: components["parameters"]["apiKeyReq"];
        };
        path: {
          codeSnippetID: components["parameters"]["codeSnippetID"];
        };
      };
      responses: {
        /** @description Updated the edit environment for code snippet */
        204: {
          content: never;
        };
        400: components["responses"]["400"];
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
  };
  "/envs/{codeSnippetID}/state": {
    /** @description Update the state of the environment */
    put: {
      parameters: {
        query: {
          api_key: components["parameters"]["apiKeyReq"];
        };
        path: {
          codeSnippetID: components["parameters"]["codeSnippetID"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EnvironmentStateUpdate"];
        };
      };
      responses: {
        /** @description Updated the state of environment */
        204: {
          content: never;
        };
        400: components["responses"]["400"];
        401: components["responses"]["401"];
      };
    };
  };
  "/envs/{codeSnippetID}/title": {
    /** @description Update the title of the environment */
    put: {
      parameters: {
        query: {
          api_key: components["parameters"]["apiKeyReq"];
        };
        path: {
          codeSnippetID: components["parameters"]["codeSnippetID"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EnvironmentTitleUpdate"];
        };
      };
      responses: {
        /** @description Updated the title of the code snippet */
        204: {
          content: never;
        };
        400: components["responses"]["400"];
        401: components["responses"]["401"];
      };
    };
  };
  "/health": {
    /** @description Health check */
    get: {
      responses: {
        /** @description Request was successful */
        200: {
          content: never;
        };
        401: components["responses"]["401"];
      };
    };
  };
  "/sessions": {
    /** @description List all sessions */
    get: {
      parameters: {
        query: {
          api_key: components["parameters"]["apiKeyReq"];
        };
      };
      responses: {
        /** @description Successfully returned all sessions */
        200: {
          content: {
            "application/json": components["schemas"]["Session"][];
          };
        };
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
    /** @description Create a session on the server */
    post: {
      parameters: {
        query?: {
          api_key?: components["parameters"]["apiKeyOpt"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewSession"];
        };
      };
      responses: {
        /** @description Successfully created a session */
        201: {
          content: {
            "application/json": components["schemas"]["Session"];
          };
        };
        400: components["responses"]["400"];
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
  };
  "/sessions/{sessionID}": {
    /** @description Delete a session on the server */
    delete: {
      parameters: {
        query: {
          api_key: components["parameters"]["apiKeyReq"];
        };
        path: {
          sessionID: components["parameters"]["sessionID"];
        };
      };
      responses: {
        /** @description Successfully deleted the session */
        204: {
          content: never;
        };
        401: components["responses"]["401"];
        500: components["responses"]["500"];
      };
    };
  };
  "/sessions/{sessionID}/refresh": {
    /** @description Refresh the session extending its time to live */
    post: {
      parameters: {
        query?: {
          api_key?: components["parameters"]["apiKeyOpt"];
        };
        path: {
          sessionID: components["parameters"]["sessionID"];
        };
      };
      responses: {
        /** @description Successfully refreshed the session */
        204: {
          content: never;
        };
        401: components["responses"]["401"];
        /** @description Error refreshing session - session not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Environment: {
      id: string;
      template?: string;
      title?: string;
    };
    /** @enum {string} */
    EnvironmentState: "Building" | "Failed" | "Done";
    EnvironmentStateUpdate: {
      state: components["schemas"]["EnvironmentState"];
    };
    EnvironmentTitleUpdate: {
      title?: string;
    };
    Error: {
      /**
       * Format: int32
       * @description Error code
       */
      code: number;
      /** @description Error */
      message: string;
    };
    NewEnvironment: {
      template: string;
      title?: string;
    };
    NewSession: {
      /** @description Identifier of a code snippet which which is the environment associated */
      codeSnippetID: string;
      /**
       * @description Option determining if the session is a shared persistent edit session
       * @default false
       */
      editEnabled?: boolean;
    };
    Session: {
      /** @description Identifier of the client */
      clientID: string;
      /** @description Identifier of a code snippet which which is the environment associated */
      codeSnippetID: string;
      /** @description Information if the session is a shared persistent edit session */
      editEnabled: boolean;
      /** @description Identifier of the session */
      sessionID: string;
    };
    /** @enum {string} */
    Template: "Nodejs" | "Go" | "Bash" | "Rust" | "Python3" | "PHP" | "Java" | "Perl" | "DotNET";
  };
  responses: {
    /** @description Bad request */
    400: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Authentication error */
    401: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Server error */
    500: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    apiKeyOpt?: string;
    apiKeyReq: string;
    codeSnippetID: string;
    sessionID: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
