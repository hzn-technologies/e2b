// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file envd/permissions/v1/permissions.proto (package envd.permissions.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message envd.permissions.v1.Credentials
 */
export class Credentials extends Message<Credentials> {
  /**
   * @generated from oneof envd.permissions.v1.Credentials.credentials
   */
  credentials: {
    /**
     * @generated from field: string user = 1;
     */
    value: string;
    case: "user";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Credentials>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.permissions.v1.Credentials";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "credentials" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Credentials {
    return new Credentials().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Credentials {
    return new Credentials().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Credentials {
    return new Credentials().fromJsonString(jsonString, options);
  }

  static equals(a: Credentials | PlainMessage<Credentials> | undefined, b: Credentials | PlainMessage<Credentials> | undefined): boolean {
    return proto3.util.equals(Credentials, a, b);
  }
}

