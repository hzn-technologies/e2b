// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file envd/network/v1/network.proto (package envd.network.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum envd.network.v1.PortState
 */
export enum PortState {
  /**
   * @generated from enum value: PORT_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PORT_STATE_OPEN = 1;
   */
  OPEN = 1,

  /**
   * @generated from enum value: PORT_STATE_CLOSED = 2;
   */
  CLOSED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PortState)
proto3.util.setEnumType(PortState, "envd.network.v1.PortState", [
  { no: 0, name: "PORT_STATE_UNSPECIFIED" },
  { no: 1, name: "PORT_STATE_OPEN" },
  { no: 2, name: "PORT_STATE_CLOSED" },
]);

/**
 * @generated from message envd.network.v1.ListPortsRequest
 */
export class ListPortsRequest extends Message<ListPortsRequest> {
  constructor(data?: PartialMessage<ListPortsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.network.v1.ListPortsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPortsRequest {
    return new ListPortsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPortsRequest {
    return new ListPortsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPortsRequest {
    return new ListPortsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPortsRequest | PlainMessage<ListPortsRequest> | undefined, b: ListPortsRequest | PlainMessage<ListPortsRequest> | undefined): boolean {
    return proto3.util.equals(ListPortsRequest, a, b);
  }
}

/**
 * @generated from message envd.network.v1.ListPortsResponse
 */
export class ListPortsResponse extends Message<ListPortsResponse> {
  /**
   * @generated from field: repeated envd.network.v1.Port ports = 1;
   */
  ports: Port[] = [];

  constructor(data?: PartialMessage<ListPortsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.network.v1.ListPortsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ports", kind: "message", T: Port, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPortsResponse {
    return new ListPortsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPortsResponse {
    return new ListPortsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPortsResponse {
    return new ListPortsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPortsResponse | PlainMessage<ListPortsResponse> | undefined, b: ListPortsResponse | PlainMessage<ListPortsResponse> | undefined): boolean {
    return proto3.util.equals(ListPortsResponse, a, b);
  }
}

/**
 * @generated from message envd.network.v1.WatchPortsRequest
 */
export class WatchPortsRequest extends Message<WatchPortsRequest> {
  /**
   * @generated from field: envd.network.v1.PortFilter filter = 1;
   */
  filter?: PortFilter;

  constructor(data?: PartialMessage<WatchPortsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.network.v1.WatchPortsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: PortFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchPortsRequest {
    return new WatchPortsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchPortsRequest {
    return new WatchPortsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchPortsRequest {
    return new WatchPortsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchPortsRequest | PlainMessage<WatchPortsRequest> | undefined, b: WatchPortsRequest | PlainMessage<WatchPortsRequest> | undefined): boolean {
    return proto3.util.equals(WatchPortsRequest, a, b);
  }
}

/**
 * @generated from message envd.network.v1.PortFilter
 */
export class PortFilter extends Message<PortFilter> {
  /**
   * @generated from field: repeated uint32 ports = 1;
   */
  ports: number[] = [];

  constructor(data?: PartialMessage<PortFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.network.v1.PortFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ports", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortFilter {
    return new PortFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortFilter {
    return new PortFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortFilter {
    return new PortFilter().fromJsonString(jsonString, options);
  }

  static equals(a: PortFilter | PlainMessage<PortFilter> | undefined, b: PortFilter | PlainMessage<PortFilter> | undefined): boolean {
    return proto3.util.equals(PortFilter, a, b);
  }
}

/**
 * @generated from message envd.network.v1.WatchPortsResponse
 */
export class WatchPortsResponse extends Message<WatchPortsResponse> {
  /**
   * @generated from field: envd.network.v1.Port event = 1;
   */
  event?: Port;

  constructor(data?: PartialMessage<WatchPortsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.network.v1.WatchPortsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: Port },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchPortsResponse {
    return new WatchPortsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchPortsResponse {
    return new WatchPortsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchPortsResponse {
    return new WatchPortsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchPortsResponse | PlainMessage<WatchPortsResponse> | undefined, b: WatchPortsResponse | PlainMessage<WatchPortsResponse> | undefined): boolean {
    return proto3.util.equals(WatchPortsResponse, a, b);
  }
}

/**
 * @generated from message envd.network.v1.Port
 */
export class Port extends Message<Port> {
  /**
   * @generated from field: uint32 port = 1;
   */
  port = 0;

  /**
   * @generated from field: envd.network.v1.PortState state = 2;
   */
  state = PortState.UNSPECIFIED;

  constructor(data?: PartialMessage<Port>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.network.v1.Port";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(PortState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Port {
    return new Port().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Port {
    return new Port().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Port {
    return new Port().fromJsonString(jsonString, options);
  }

  static equals(a: Port | PlainMessage<Port> | undefined, b: Port | PlainMessage<Port> | undefined): boolean {
    return proto3.util.equals(Port, a, b);
  }
}

