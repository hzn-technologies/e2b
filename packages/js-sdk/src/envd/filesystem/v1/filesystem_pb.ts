// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file envd/filesystem/v1/filesystem.proto (package envd.filesystem.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Credentials } from "../../permissions/v1/permissions_pb.js";

/**
 * @generated from enum envd.filesystem.v1.FileType
 */
export enum FileType {
  /**
   * @generated from enum value: FILE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FILE_TYPE_FILE = 1;
   */
  FILE = 1,

  /**
   * @generated from enum value: FILE_TYPE_DIRECTORY = 2;
   */
  DIRECTORY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FileType)
proto3.util.setEnumType(FileType, "envd.filesystem.v1.FileType", [
  { no: 0, name: "FILE_TYPE_UNSPECIFIED" },
  { no: 1, name: "FILE_TYPE_FILE" },
  { no: 2, name: "FILE_TYPE_DIRECTORY" },
]);

/**
 * @generated from enum envd.filesystem.v1.EventType
 */
export enum EventType {
  /**
   * @generated from enum value: EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: EVENT_TYPE_CREATE = 1;
   */
  CREATE = 1,

  /**
   * @generated from enum value: EVENT_TYPE_WRITE = 2;
   */
  WRITE = 2,

  /**
   * @generated from enum value: EVENT_TYPE_REMOVE = 3;
   */
  REMOVE = 3,

  /**
   * @generated from enum value: EVENT_TYPE_RENAME = 4;
   */
  RENAME = 4,

  /**
   * @generated from enum value: EVENT_TYPE_CHMOD = 5;
   */
  CHMOD = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(EventType)
proto3.util.setEnumType(EventType, "envd.filesystem.v1.EventType", [
  { no: 0, name: "EVENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "EVENT_TYPE_CREATE" },
  { no: 2, name: "EVENT_TYPE_WRITE" },
  { no: 3, name: "EVENT_TYPE_REMOVE" },
  { no: 4, name: "EVENT_TYPE_RENAME" },
  { no: 5, name: "EVENT_TYPE_CHMOD" },
]);

/**
 * @generated from message envd.filesystem.v1.CreateDirRequest
 */
export class CreateDirRequest extends Message<CreateDirRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: string mode = 3;
   */
  mode = "";

  /**
   * @generated from field: envd.permissions.v1.Credentials owner = 4;
   */
  owner?: Credentials;

  constructor(data?: PartialMessage<CreateDirRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.CreateDirRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "owner", kind: "message", T: Credentials },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDirRequest {
    return new CreateDirRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDirRequest {
    return new CreateDirRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDirRequest {
    return new CreateDirRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDirRequest | PlainMessage<CreateDirRequest> | undefined, b: CreateDirRequest | PlainMessage<CreateDirRequest> | undefined): boolean {
    return proto3.util.equals(CreateDirRequest, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.CreateDirResponse
 */
export class CreateDirResponse extends Message<CreateDirResponse> {
  constructor(data?: PartialMessage<CreateDirResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.CreateDirResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDirResponse {
    return new CreateDirResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDirResponse {
    return new CreateDirResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDirResponse {
    return new CreateDirResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDirResponse | PlainMessage<CreateDirResponse> | undefined, b: CreateDirResponse | PlainMessage<CreateDirResponse> | undefined): boolean {
    return proto3.util.equals(CreateDirResponse, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.CopyRequest
 */
export class CopyRequest extends Message<CopyRequest> {
  /**
   * @generated from field: string source = 1;
   */
  source = "";

  /**
   * @generated from field: string destination = 2;
   */
  destination = "";

  /**
   * @generated from field: string mode = 3;
   */
  mode = "";

  constructor(data?: PartialMessage<CopyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.CopyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyRequest {
    return new CopyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyRequest {
    return new CopyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyRequest {
    return new CopyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CopyRequest | PlainMessage<CopyRequest> | undefined, b: CopyRequest | PlainMessage<CopyRequest> | undefined): boolean {
    return proto3.util.equals(CopyRequest, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.CopyResponse
 */
export class CopyResponse extends Message<CopyResponse> {
  constructor(data?: PartialMessage<CopyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.CopyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyResponse {
    return new CopyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyResponse {
    return new CopyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyResponse {
    return new CopyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CopyResponse | PlainMessage<CopyResponse> | undefined, b: CopyResponse | PlainMessage<CopyResponse> | undefined): boolean {
    return proto3.util.equals(CopyResponse, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.StatRequest
 */
export class StatRequest extends Message<StatRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<StatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.StatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatRequest {
    return new StatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatRequest {
    return new StatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatRequest {
    return new StatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StatRequest | PlainMessage<StatRequest> | undefined, b: StatRequest | PlainMessage<StatRequest> | undefined): boolean {
    return proto3.util.equals(StatRequest, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.StatResponse
 */
export class StatResponse extends Message<StatResponse> {
  /**
   * @generated from field: envd.filesystem.v1.EntryInfo entry = 1;
   */
  entry?: EntryInfo;

  constructor(data?: PartialMessage<StatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.StatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "message", T: EntryInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatResponse {
    return new StatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatResponse {
    return new StatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatResponse {
    return new StatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StatResponse | PlainMessage<StatResponse> | undefined, b: StatResponse | PlainMessage<StatResponse> | undefined): boolean {
    return proto3.util.equals(StatResponse, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.RemoveRequest
 */
export class RemoveRequest extends Message<RemoveRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bool recursive = 2;
   */
  recursive = false;

  constructor(data?: PartialMessage<RemoveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.RemoveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recursive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveRequest {
    return new RemoveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveRequest {
    return new RemoveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveRequest {
    return new RemoveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveRequest | PlainMessage<RemoveRequest> | undefined, b: RemoveRequest | PlainMessage<RemoveRequest> | undefined): boolean {
    return proto3.util.equals(RemoveRequest, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.RemoveResponse
 */
export class RemoveResponse extends Message<RemoveResponse> {
  constructor(data?: PartialMessage<RemoveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.RemoveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveResponse {
    return new RemoveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveResponse {
    return new RemoveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveResponse {
    return new RemoveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveResponse | PlainMessage<RemoveResponse> | undefined, b: RemoveResponse | PlainMessage<RemoveResponse> | undefined): boolean {
    return proto3.util.equals(RemoveResponse, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.RenameRequest
 */
export class RenameRequest extends Message<RenameRequest> {
  /**
   * @generated from field: string source = 1;
   */
  source = "";

  /**
   * @generated from field: string destination = 2;
   */
  destination = "";

  constructor(data?: PartialMessage<RenameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.RenameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "destination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameRequest {
    return new RenameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameRequest {
    return new RenameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameRequest {
    return new RenameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenameRequest | PlainMessage<RenameRequest> | undefined, b: RenameRequest | PlainMessage<RenameRequest> | undefined): boolean {
    return proto3.util.equals(RenameRequest, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.RenameResponse
 */
export class RenameResponse extends Message<RenameResponse> {
  constructor(data?: PartialMessage<RenameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.RenameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameResponse {
    return new RenameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameResponse {
    return new RenameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameResponse {
    return new RenameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenameResponse | PlainMessage<RenameResponse> | undefined, b: RenameResponse | PlainMessage<RenameResponse> | undefined): boolean {
    return proto3.util.equals(RenameResponse, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.EntryInfo
 */
export class EntryInfo extends Message<EntryInfo> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: envd.filesystem.v1.FileType type = 2;
   */
  type = FileType.UNSPECIFIED;

  constructor(data?: PartialMessage<EntryInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.EntryInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(FileType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntryInfo {
    return new EntryInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntryInfo {
    return new EntryInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntryInfo {
    return new EntryInfo().fromJsonString(jsonString, options);
  }

  static equals(a: EntryInfo | PlainMessage<EntryInfo> | undefined, b: EntryInfo | PlainMessage<EntryInfo> | undefined): boolean {
    return proto3.util.equals(EntryInfo, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.ListDirRequest
 */
export class ListDirRequest extends Message<ListDirRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<ListDirRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.ListDirRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDirRequest {
    return new ListDirRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDirRequest {
    return new ListDirRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDirRequest {
    return new ListDirRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDirRequest | PlainMessage<ListDirRequest> | undefined, b: ListDirRequest | PlainMessage<ListDirRequest> | undefined): boolean {
    return proto3.util.equals(ListDirRequest, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.ListDirResponse
 */
export class ListDirResponse extends Message<ListDirResponse> {
  /**
   * @generated from field: repeated envd.filesystem.v1.EntryInfo entries = 1;
   */
  entries: EntryInfo[] = [];

  constructor(data?: PartialMessage<ListDirResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.ListDirResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: EntryInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDirResponse {
    return new ListDirResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDirResponse {
    return new ListDirResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDirResponse {
    return new ListDirResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDirResponse | PlainMessage<ListDirResponse> | undefined, b: ListDirResponse | PlainMessage<ListDirResponse> | undefined): boolean {
    return proto3.util.equals(ListDirResponse, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.WatchRequest
 */
export class WatchRequest extends Message<WatchRequest> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<WatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.WatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchRequest {
    return new WatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchRequest {
    return new WatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchRequest {
    return new WatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchRequest | PlainMessage<WatchRequest> | undefined, b: WatchRequest | PlainMessage<WatchRequest> | undefined): boolean {
    return proto3.util.equals(WatchRequest, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.WatchResponse
 */
export class WatchResponse extends Message<WatchResponse> {
  /**
   * @generated from field: envd.filesystem.v1.FilesystemEvent event = 1;
   */
  event?: FilesystemEvent;

  constructor(data?: PartialMessage<WatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.WatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: FilesystemEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchResponse {
    return new WatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchResponse {
    return new WatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchResponse {
    return new WatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchResponse | PlainMessage<WatchResponse> | undefined, b: WatchResponse | PlainMessage<WatchResponse> | undefined): boolean {
    return proto3.util.equals(WatchResponse, a, b);
  }
}

/**
 * @generated from message envd.filesystem.v1.FilesystemEvent
 */
export class FilesystemEvent extends Message<FilesystemEvent> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: envd.filesystem.v1.EventType type = 2;
   */
  type = EventType.UNSPECIFIED;

  constructor(data?: PartialMessage<FilesystemEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.filesystem.v1.FilesystemEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(EventType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilesystemEvent {
    return new FilesystemEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilesystemEvent {
    return new FilesystemEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilesystemEvent {
    return new FilesystemEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FilesystemEvent | PlainMessage<FilesystemEvent> | undefined, b: FilesystemEvent | PlainMessage<FilesystemEvent> | undefined): boolean {
    return proto3.util.equals(FilesystemEvent, a, b);
  }
}

