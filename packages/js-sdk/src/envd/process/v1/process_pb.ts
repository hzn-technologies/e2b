// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file envd/process/v1/process.proto (package envd.process.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Credentials } from "../../permissions/v1/permissions_pb.js";

/**
 * @generated from enum envd.process.v1.Signal
 */
export enum Signal {
  /**
   * @generated from enum value: SIGNAL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SIGNAL_SIGTERM = 1;
   */
  SIGTERM = 1,

  /**
   * @generated from enum value: SIGNAL_SIGKILL = 2;
   */
  SIGKILL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Signal)
proto3.util.setEnumType(Signal, "envd.process.v1.Signal", [
  { no: 0, name: "SIGNAL_UNSPECIFIED" },
  { no: 1, name: "SIGNAL_SIGTERM" },
  { no: 2, name: "SIGNAL_SIGKILL" },
]);

/**
 * @generated from message envd.process.v1.PTY
 */
export class PTY extends Message<PTY> {
  /**
   * @generated from field: envd.process.v1.PTY.Size size = 1;
   */
  size?: PTY_Size;

  constructor(data?: PartialMessage<PTY>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.PTY";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "message", T: PTY_Size },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PTY {
    return new PTY().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PTY {
    return new PTY().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PTY {
    return new PTY().fromJsonString(jsonString, options);
  }

  static equals(a: PTY | PlainMessage<PTY> | undefined, b: PTY | PlainMessage<PTY> | undefined): boolean {
    return proto3.util.equals(PTY, a, b);
  }
}

/**
 * @generated from message envd.process.v1.PTY.Size
 */
export class PTY_Size extends Message<PTY_Size> {
  /**
   * @generated from field: uint32 cols = 1;
   */
  cols = 0;

  /**
   * @generated from field: uint32 rows = 2;
   */
  rows = 0;

  constructor(data?: PartialMessage<PTY_Size>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.PTY.Size";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cols", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "rows", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PTY_Size {
    return new PTY_Size().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PTY_Size {
    return new PTY_Size().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PTY_Size {
    return new PTY_Size().fromJsonString(jsonString, options);
  }

  static equals(a: PTY_Size | PlainMessage<PTY_Size> | undefined, b: PTY_Size | PlainMessage<PTY_Size> | undefined): boolean {
    return proto3.util.equals(PTY_Size, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ProcessConfig
 */
export class ProcessConfig extends Message<ProcessConfig> {
  /**
   * @generated from field: string cmd = 1;
   */
  cmd = "";

  /**
   * @generated from field: repeated string args = 2;
   */
  args: string[] = [];

  /**
   * @generated from field: map<string, string> env = 3;
   */
  env: { [key: string]: string } = {};

  /**
   * @generated from field: string cwd = 4;
   */
  cwd = "";

  constructor(data?: PartialMessage<ProcessConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ProcessConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "env", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "cwd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessConfig {
    return new ProcessConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessConfig {
    return new ProcessConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessConfig {
    return new ProcessConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessConfig | PlainMessage<ProcessConfig> | undefined, b: ProcessConfig | PlainMessage<ProcessConfig> | undefined): boolean {
    return proto3.util.equals(ProcessConfig, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ListProcessesRequest
 */
export class ListProcessesRequest extends Message<ListProcessesRequest> {
  constructor(data?: PartialMessage<ListProcessesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ListProcessesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProcessesRequest {
    return new ListProcessesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProcessesRequest {
    return new ListProcessesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProcessesRequest {
    return new ListProcessesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProcessesRequest | PlainMessage<ListProcessesRequest> | undefined, b: ListProcessesRequest | PlainMessage<ListProcessesRequest> | undefined): boolean {
    return proto3.util.equals(ListProcessesRequest, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ListProcessesResponse
 */
export class ListProcessesResponse extends Message<ListProcessesResponse> {
  /**
   * @generated from field: repeated envd.process.v1.ProcessConfig processes = 1;
   */
  processes: ProcessConfig[] = [];

  constructor(data?: PartialMessage<ListProcessesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ListProcessesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "processes", kind: "message", T: ProcessConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProcessesResponse {
    return new ListProcessesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProcessesResponse {
    return new ListProcessesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProcessesResponse {
    return new ListProcessesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProcessesResponse | PlainMessage<ListProcessesResponse> | undefined, b: ListProcessesResponse | PlainMessage<ListProcessesResponse> | undefined): boolean {
    return proto3.util.equals(ListProcessesResponse, a, b);
  }
}

/**
 * @generated from message envd.process.v1.StartProcessRequest
 */
export class StartProcessRequest extends Message<StartProcessRequest> {
  /**
   * @generated from field: envd.process.v1.ProcessConfig process = 1;
   */
  process?: ProcessConfig;

  /**
   * @generated from field: optional envd.process.v1.PTY pty = 2;
   */
  pty?: PTY;

  /**
   * @generated from field: envd.permissions.v1.Credentials owner = 3;
   */
  owner?: Credentials;

  constructor(data?: PartialMessage<StartProcessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.StartProcessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessConfig },
    { no: 2, name: "pty", kind: "message", T: PTY, opt: true },
    { no: 3, name: "owner", kind: "message", T: Credentials },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartProcessRequest {
    return new StartProcessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartProcessRequest {
    return new StartProcessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartProcessRequest {
    return new StartProcessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartProcessRequest | PlainMessage<StartProcessRequest> | undefined, b: StartProcessRequest | PlainMessage<StartProcessRequest> | undefined): boolean {
    return proto3.util.equals(StartProcessRequest, a, b);
  }
}

/**
 * @generated from message envd.process.v1.UpdateProcessRequest
 */
export class UpdateProcessRequest extends Message<UpdateProcessRequest> {
  /**
   * @generated from field: envd.process.v1.ProcessSelector process = 1;
   */
  process?: ProcessSelector;

  /**
   * @generated from field: optional envd.process.v1.PTY pty = 2;
   */
  pty?: PTY;

  constructor(data?: PartialMessage<UpdateProcessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.UpdateProcessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessSelector },
    { no: 2, name: "pty", kind: "message", T: PTY, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProcessRequest {
    return new UpdateProcessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProcessRequest {
    return new UpdateProcessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProcessRequest {
    return new UpdateProcessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProcessRequest | PlainMessage<UpdateProcessRequest> | undefined, b: UpdateProcessRequest | PlainMessage<UpdateProcessRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProcessRequest, a, b);
  }
}

/**
 * @generated from message envd.process.v1.UpdateProcessResponse
 */
export class UpdateProcessResponse extends Message<UpdateProcessResponse> {
  constructor(data?: PartialMessage<UpdateProcessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.UpdateProcessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProcessResponse {
    return new UpdateProcessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProcessResponse {
    return new UpdateProcessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProcessResponse {
    return new UpdateProcessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProcessResponse | PlainMessage<UpdateProcessResponse> | undefined, b: UpdateProcessResponse | PlainMessage<UpdateProcessResponse> | undefined): boolean {
    return proto3.util.equals(UpdateProcessResponse, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ProcessEvent
 */
export class ProcessEvent extends Message<ProcessEvent> {
  /**
   * @generated from oneof envd.process.v1.ProcessEvent.event_type
   */
  eventType: {
    /**
     * @generated from field: envd.process.v1.ProcessEvent.StartEvent start = 1;
     */
    value: ProcessEvent_StartEvent;
    case: "start";
  } | {
    /**
     * @generated from field: envd.process.v1.ProcessEvent.DataEvent data = 2;
     */
    value: ProcessEvent_DataEvent;
    case: "data";
  } | {
    /**
     * @generated from field: envd.process.v1.ProcessEvent.EndEvent end = 3;
     */
    value: ProcessEvent_EndEvent;
    case: "end";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProcessEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ProcessEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: ProcessEvent_StartEvent, oneof: "event_type" },
    { no: 2, name: "data", kind: "message", T: ProcessEvent_DataEvent, oneof: "event_type" },
    { no: 3, name: "end", kind: "message", T: ProcessEvent_EndEvent, oneof: "event_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessEvent {
    return new ProcessEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessEvent {
    return new ProcessEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessEvent {
    return new ProcessEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessEvent | PlainMessage<ProcessEvent> | undefined, b: ProcessEvent | PlainMessage<ProcessEvent> | undefined): boolean {
    return proto3.util.equals(ProcessEvent, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ProcessEvent.StartEvent
 */
export class ProcessEvent_StartEvent extends Message<ProcessEvent_StartEvent> {
  /**
   * @generated from field: uint32 pid = 5;
   */
  pid = 0;

  constructor(data?: PartialMessage<ProcessEvent_StartEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ProcessEvent.StartEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "pid", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessEvent_StartEvent {
    return new ProcessEvent_StartEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessEvent_StartEvent {
    return new ProcessEvent_StartEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessEvent_StartEvent {
    return new ProcessEvent_StartEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessEvent_StartEvent | PlainMessage<ProcessEvent_StartEvent> | undefined, b: ProcessEvent_StartEvent | PlainMessage<ProcessEvent_StartEvent> | undefined): boolean {
    return proto3.util.equals(ProcessEvent_StartEvent, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ProcessEvent.DataEvent
 */
export class ProcessEvent_DataEvent extends Message<ProcessEvent_DataEvent> {
  /**
   * @generated from field: optional bytes stdout = 6;
   */
  stdout?: Uint8Array;

  /**
   * @generated from field: optional bytes stderr = 7;
   */
  stderr?: Uint8Array;

  constructor(data?: PartialMessage<ProcessEvent_DataEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ProcessEvent.DataEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 6, name: "stdout", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 7, name: "stderr", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessEvent_DataEvent {
    return new ProcessEvent_DataEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessEvent_DataEvent {
    return new ProcessEvent_DataEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessEvent_DataEvent {
    return new ProcessEvent_DataEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessEvent_DataEvent | PlainMessage<ProcessEvent_DataEvent> | undefined, b: ProcessEvent_DataEvent | PlainMessage<ProcessEvent_DataEvent> | undefined): boolean {
    return proto3.util.equals(ProcessEvent_DataEvent, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ProcessEvent.EndEvent
 */
export class ProcessEvent_EndEvent extends Message<ProcessEvent_EndEvent> {
  /**
   * @generated from field: sint32 exit_code = 8;
   */
  exitCode = 0;

  /**
   * @generated from field: optional string error = 9;
   */
  error?: string;

  constructor(data?: PartialMessage<ProcessEvent_EndEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ProcessEvent.EndEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 8, name: "exit_code", kind: "scalar", T: 17 /* ScalarType.SINT32 */ },
    { no: 9, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessEvent_EndEvent {
    return new ProcessEvent_EndEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessEvent_EndEvent {
    return new ProcessEvent_EndEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessEvent_EndEvent {
    return new ProcessEvent_EndEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessEvent_EndEvent | PlainMessage<ProcessEvent_EndEvent> | undefined, b: ProcessEvent_EndEvent | PlainMessage<ProcessEvent_EndEvent> | undefined): boolean {
    return proto3.util.equals(ProcessEvent_EndEvent, a, b);
  }
}

/**
 * @generated from message envd.process.v1.StartProcessResponse
 */
export class StartProcessResponse extends Message<StartProcessResponse> {
  /**
   * @generated from field: envd.process.v1.ProcessEvent event = 1;
   */
  event?: ProcessEvent;

  constructor(data?: PartialMessage<StartProcessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.StartProcessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: ProcessEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartProcessResponse {
    return new StartProcessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartProcessResponse {
    return new StartProcessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartProcessResponse {
    return new StartProcessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartProcessResponse | PlainMessage<StartProcessResponse> | undefined, b: StartProcessResponse | PlainMessage<StartProcessResponse> | undefined): boolean {
    return proto3.util.equals(StartProcessResponse, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ReconnectProcessResponse
 */
export class ReconnectProcessResponse extends Message<ReconnectProcessResponse> {
  /**
   * @generated from field: envd.process.v1.ProcessEvent event = 1;
   */
  event?: ProcessEvent;

  constructor(data?: PartialMessage<ReconnectProcessResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ReconnectProcessResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: ProcessEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconnectProcessResponse {
    return new ReconnectProcessResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconnectProcessResponse {
    return new ReconnectProcessResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconnectProcessResponse {
    return new ReconnectProcessResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReconnectProcessResponse | PlainMessage<ReconnectProcessResponse> | undefined, b: ReconnectProcessResponse | PlainMessage<ReconnectProcessResponse> | undefined): boolean {
    return proto3.util.equals(ReconnectProcessResponse, a, b);
  }
}

/**
 * @generated from message envd.process.v1.SendProcessInputRequest
 */
export class SendProcessInputRequest extends Message<SendProcessInputRequest> {
  /**
   * @generated from field: envd.process.v1.ProcessSelector process = 1;
   */
  process?: ProcessSelector;

  /**
   * @generated from field: envd.process.v1.ProcessInput input = 2;
   */
  input?: ProcessInput;

  constructor(data?: PartialMessage<SendProcessInputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.SendProcessInputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessSelector },
    { no: 2, name: "input", kind: "message", T: ProcessInput },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendProcessInputRequest {
    return new SendProcessInputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendProcessInputRequest {
    return new SendProcessInputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendProcessInputRequest {
    return new SendProcessInputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendProcessInputRequest | PlainMessage<SendProcessInputRequest> | undefined, b: SendProcessInputRequest | PlainMessage<SendProcessInputRequest> | undefined): boolean {
    return proto3.util.equals(SendProcessInputRequest, a, b);
  }
}

/**
 * @generated from message envd.process.v1.SendProcessInputResponse
 */
export class SendProcessInputResponse extends Message<SendProcessInputResponse> {
  constructor(data?: PartialMessage<SendProcessInputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.SendProcessInputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendProcessInputResponse {
    return new SendProcessInputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendProcessInputResponse {
    return new SendProcessInputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendProcessInputResponse {
    return new SendProcessInputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendProcessInputResponse | PlainMessage<SendProcessInputResponse> | undefined, b: SendProcessInputResponse | PlainMessage<SendProcessInputResponse> | undefined): boolean {
    return proto3.util.equals(SendProcessInputResponse, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ProcessInput
 */
export class ProcessInput extends Message<ProcessInput> {
  /**
   * @generated from oneof envd.process.v1.ProcessInput.input
   */
  input: {
    /**
     * @generated from field: bytes stdin = 1;
     */
    value: Uint8Array;
    case: "stdin";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProcessInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ProcessInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stdin", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "input" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessInput {
    return new ProcessInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessInput {
    return new ProcessInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessInput {
    return new ProcessInput().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessInput | PlainMessage<ProcessInput> | undefined, b: ProcessInput | PlainMessage<ProcessInput> | undefined): boolean {
    return proto3.util.equals(ProcessInput, a, b);
  }
}

/**
 * @generated from message envd.process.v1.SendProcessSignalRequest
 */
export class SendProcessSignalRequest extends Message<SendProcessSignalRequest> {
  /**
   * @generated from field: envd.process.v1.ProcessSelector process = 1;
   */
  process?: ProcessSelector;

  /**
   * @generated from field: envd.process.v1.Signal signal = 2;
   */
  signal = Signal.UNSPECIFIED;

  constructor(data?: PartialMessage<SendProcessSignalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.SendProcessSignalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessSelector },
    { no: 2, name: "signal", kind: "enum", T: proto3.getEnumType(Signal) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendProcessSignalRequest {
    return new SendProcessSignalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendProcessSignalRequest {
    return new SendProcessSignalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendProcessSignalRequest {
    return new SendProcessSignalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendProcessSignalRequest | PlainMessage<SendProcessSignalRequest> | undefined, b: SendProcessSignalRequest | PlainMessage<SendProcessSignalRequest> | undefined): boolean {
    return proto3.util.equals(SendProcessSignalRequest, a, b);
  }
}

/**
 * @generated from message envd.process.v1.SendProcessSignalResponse
 */
export class SendProcessSignalResponse extends Message<SendProcessSignalResponse> {
  constructor(data?: PartialMessage<SendProcessSignalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.SendProcessSignalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendProcessSignalResponse {
    return new SendProcessSignalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendProcessSignalResponse {
    return new SendProcessSignalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendProcessSignalResponse {
    return new SendProcessSignalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendProcessSignalResponse | PlainMessage<SendProcessSignalResponse> | undefined, b: SendProcessSignalResponse | PlainMessage<SendProcessSignalResponse> | undefined): boolean {
    return proto3.util.equals(SendProcessSignalResponse, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ReconnectProcessRequest
 */
export class ReconnectProcessRequest extends Message<ReconnectProcessRequest> {
  /**
   * @generated from field: envd.process.v1.ProcessSelector process = 1;
   */
  process?: ProcessSelector;

  constructor(data?: PartialMessage<ReconnectProcessRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ReconnectProcessRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessSelector },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconnectProcessRequest {
    return new ReconnectProcessRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconnectProcessRequest {
    return new ReconnectProcessRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconnectProcessRequest {
    return new ReconnectProcessRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReconnectProcessRequest | PlainMessage<ReconnectProcessRequest> | undefined, b: ReconnectProcessRequest | PlainMessage<ReconnectProcessRequest> | undefined): boolean {
    return proto3.util.equals(ReconnectProcessRequest, a, b);
  }
}

/**
 * @generated from message envd.process.v1.ProcessSelector
 */
export class ProcessSelector extends Message<ProcessSelector> {
  /**
   * @generated from oneof envd.process.v1.ProcessSelector.selector
   */
  selector: {
    /**
     * @generated from field: uint32 pid = 1;
     */
    value: number;
    case: "pid";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProcessSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "envd.process.v1.ProcessSelector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pid", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "selector" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessSelector {
    return new ProcessSelector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessSelector {
    return new ProcessSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessSelector {
    return new ProcessSelector().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessSelector | PlainMessage<ProcessSelector> | undefined, b: ProcessSelector | PlainMessage<ProcessSelector> | undefined): boolean {
    return proto3.util.equals(ProcessSelector, a, b);
  }
}

