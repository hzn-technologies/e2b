// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file process/process.proto (package process, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { User } from "../permissions/permissions_pb.js";

/**
 * @generated from enum process.Signal
 */
export enum Signal {
  /**
   * @generated from enum value: SIGNAL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SIGNAL_SIGTERM = 15;
   */
  SIGTERM = 15,

  /**
   * @generated from enum value: SIGNAL_SIGKILL = 9;
   */
  SIGKILL = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(Signal)
proto3.util.setEnumType(Signal, "process.Signal", [
  { no: 0, name: "SIGNAL_UNSPECIFIED" },
  { no: 15, name: "SIGNAL_SIGTERM" },
  { no: 9, name: "SIGNAL_SIGKILL" },
]);

/**
 * @generated from message process.PTY
 */
export class PTY extends Message<PTY> {
  /**
   * @generated from field: process.PTY.Size size = 1;
   */
  size?: PTY_Size;

  constructor(data?: PartialMessage<PTY>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.PTY";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "message", T: PTY_Size },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PTY {
    return new PTY().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PTY {
    return new PTY().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PTY {
    return new PTY().fromJsonString(jsonString, options);
  }

  static equals(a: PTY | PlainMessage<PTY> | undefined, b: PTY | PlainMessage<PTY> | undefined): boolean {
    return proto3.util.equals(PTY, a, b);
  }
}

/**
 * @generated from message process.PTY.Size
 */
export class PTY_Size extends Message<PTY_Size> {
  /**
   * @generated from field: uint32 cols = 1;
   */
  cols = 0;

  /**
   * @generated from field: uint32 rows = 2;
   */
  rows = 0;

  constructor(data?: PartialMessage<PTY_Size>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.PTY.Size";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cols", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "rows", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PTY_Size {
    return new PTY_Size().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PTY_Size {
    return new PTY_Size().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PTY_Size {
    return new PTY_Size().fromJsonString(jsonString, options);
  }

  static equals(a: PTY_Size | PlainMessage<PTY_Size> | undefined, b: PTY_Size | PlainMessage<PTY_Size> | undefined): boolean {
    return proto3.util.equals(PTY_Size, a, b);
  }
}

/**
 * @generated from message process.ProcessConfig
 */
export class ProcessConfig extends Message<ProcessConfig> {
  /**
   * @generated from field: string cmd = 1;
   */
  cmd = "";

  /**
   * @generated from field: repeated string args = 2;
   */
  args: string[] = [];

  /**
   * @generated from field: map<string, string> envs = 3;
   */
  envs: { [key: string]: string } = {};

  /**
   * @generated from field: optional string cwd = 4;
   */
  cwd?: string;

  constructor(data?: PartialMessage<ProcessConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ProcessConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "envs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "cwd", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessConfig {
    return new ProcessConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessConfig {
    return new ProcessConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessConfig {
    return new ProcessConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessConfig | PlainMessage<ProcessConfig> | undefined, b: ProcessConfig | PlainMessage<ProcessConfig> | undefined): boolean {
    return proto3.util.equals(ProcessConfig, a, b);
  }
}

/**
 * @generated from message process.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  constructor(data?: PartialMessage<ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRequest {
    return new ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRequest | PlainMessage<ListRequest> | undefined, b: ListRequest | PlainMessage<ListRequest> | undefined): boolean {
    return proto3.util.equals(ListRequest, a, b);
  }
}

/**
 * @generated from message process.ProcessInfo
 */
export class ProcessInfo extends Message<ProcessInfo> {
  /**
   * @generated from field: process.ProcessConfig config = 1;
   */
  config?: ProcessConfig;

  /**
   * @generated from field: uint32 pid = 2;
   */
  pid = 0;

  /**
   * @generated from field: optional string tag = 3;
   */
  tag?: string;

  constructor(data?: PartialMessage<ProcessInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ProcessInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: ProcessConfig },
    { no: 2, name: "pid", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessInfo {
    return new ProcessInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessInfo {
    return new ProcessInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessInfo {
    return new ProcessInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessInfo | PlainMessage<ProcessInfo> | undefined, b: ProcessInfo | PlainMessage<ProcessInfo> | undefined): boolean {
    return proto3.util.equals(ProcessInfo, a, b);
  }
}

/**
 * @generated from message process.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * @generated from field: repeated process.ProcessInfo processes = 1;
   */
  processes: ProcessInfo[] = [];

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "processes", kind: "message", T: ProcessInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * @generated from message process.StartRequest
 */
export class StartRequest extends Message<StartRequest> {
  /**
   * @generated from field: process.ProcessConfig process = 1;
   */
  process?: ProcessConfig;

  /**
   * @generated from field: optional process.PTY pty = 2;
   */
  pty?: PTY;

  /**
   * @generated from field: optional string tag = 3;
   */
  tag?: string;

  /**
   * @generated from field: permissions.User user = 4;
   */
  user?: User;

  constructor(data?: PartialMessage<StartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.StartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessConfig },
    { no: 2, name: "pty", kind: "message", T: PTY, opt: true },
    { no: 3, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartRequest {
    return new StartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartRequest {
    return new StartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartRequest {
    return new StartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartRequest | PlainMessage<StartRequest> | undefined, b: StartRequest | PlainMessage<StartRequest> | undefined): boolean {
    return proto3.util.equals(StartRequest, a, b);
  }
}

/**
 * @generated from message process.UpdateRequest
 */
export class UpdateRequest extends Message<UpdateRequest> {
  /**
   * @generated from field: process.ProcessSelector process = 1;
   */
  process?: ProcessSelector;

  /**
   * @generated from field: optional process.PTY pty = 2;
   */
  pty?: PTY;

  constructor(data?: PartialMessage<UpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.UpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessSelector },
    { no: 2, name: "pty", kind: "message", T: PTY, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRequest {
    return new UpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRequest | PlainMessage<UpdateRequest> | undefined, b: UpdateRequest | PlainMessage<UpdateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRequest, a, b);
  }
}

/**
 * @generated from message process.UpdateResponse
 */
export class UpdateResponse extends Message<UpdateResponse> {
  constructor(data?: PartialMessage<UpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.UpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResponse {
    return new UpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResponse | PlainMessage<UpdateResponse> | undefined, b: UpdateResponse | PlainMessage<UpdateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateResponse, a, b);
  }
}

/**
 * @generated from message process.ProcessEvent
 */
export class ProcessEvent extends Message<ProcessEvent> {
  /**
   * @generated from oneof process.ProcessEvent.event
   */
  event: {
    /**
     * @generated from field: process.ProcessEvent.StartEvent start = 1;
     */
    value: ProcessEvent_StartEvent;
    case: "start";
  } | {
    /**
     * @generated from field: process.ProcessEvent.DataEvent data = 2;
     */
    value: ProcessEvent_DataEvent;
    case: "data";
  } | {
    /**
     * @generated from field: process.ProcessEvent.EndEvent end = 3;
     */
    value: ProcessEvent_EndEvent;
    case: "end";
  } | {
    /**
     * @generated from field: process.ProcessEvent.KeepAlive keepalive = 4;
     */
    value: ProcessEvent_KeepAlive;
    case: "keepalive";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProcessEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ProcessEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: ProcessEvent_StartEvent, oneof: "event" },
    { no: 2, name: "data", kind: "message", T: ProcessEvent_DataEvent, oneof: "event" },
    { no: 3, name: "end", kind: "message", T: ProcessEvent_EndEvent, oneof: "event" },
    { no: 4, name: "keepalive", kind: "message", T: ProcessEvent_KeepAlive, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessEvent {
    return new ProcessEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessEvent {
    return new ProcessEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessEvent {
    return new ProcessEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessEvent | PlainMessage<ProcessEvent> | undefined, b: ProcessEvent | PlainMessage<ProcessEvent> | undefined): boolean {
    return proto3.util.equals(ProcessEvent, a, b);
  }
}

/**
 * @generated from message process.ProcessEvent.StartEvent
 */
export class ProcessEvent_StartEvent extends Message<ProcessEvent_StartEvent> {
  /**
   * @generated from field: uint32 pid = 1;
   */
  pid = 0;

  constructor(data?: PartialMessage<ProcessEvent_StartEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ProcessEvent.StartEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pid", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessEvent_StartEvent {
    return new ProcessEvent_StartEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessEvent_StartEvent {
    return new ProcessEvent_StartEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessEvent_StartEvent {
    return new ProcessEvent_StartEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessEvent_StartEvent | PlainMessage<ProcessEvent_StartEvent> | undefined, b: ProcessEvent_StartEvent | PlainMessage<ProcessEvent_StartEvent> | undefined): boolean {
    return proto3.util.equals(ProcessEvent_StartEvent, a, b);
  }
}

/**
 * @generated from message process.ProcessEvent.DataEvent
 */
export class ProcessEvent_DataEvent extends Message<ProcessEvent_DataEvent> {
  /**
   * @generated from oneof process.ProcessEvent.DataEvent.output
   */
  output: {
    /**
     * @generated from field: bytes stdout = 1;
     */
    value: Uint8Array;
    case: "stdout";
  } | {
    /**
     * @generated from field: bytes stderr = 2;
     */
    value: Uint8Array;
    case: "stderr";
  } | {
    /**
     * @generated from field: bytes pty = 3;
     */
    value: Uint8Array;
    case: "pty";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProcessEvent_DataEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ProcessEvent.DataEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stdout", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "output" },
    { no: 2, name: "stderr", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "output" },
    { no: 3, name: "pty", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "output" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessEvent_DataEvent {
    return new ProcessEvent_DataEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessEvent_DataEvent {
    return new ProcessEvent_DataEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessEvent_DataEvent {
    return new ProcessEvent_DataEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessEvent_DataEvent | PlainMessage<ProcessEvent_DataEvent> | undefined, b: ProcessEvent_DataEvent | PlainMessage<ProcessEvent_DataEvent> | undefined): boolean {
    return proto3.util.equals(ProcessEvent_DataEvent, a, b);
  }
}

/**
 * @generated from message process.ProcessEvent.EndEvent
 */
export class ProcessEvent_EndEvent extends Message<ProcessEvent_EndEvent> {
  /**
   * @generated from field: sint32 exit_code = 1;
   */
  exitCode = 0;

  /**
   * @generated from field: bool exited = 2;
   */
  exited = false;

  /**
   * @generated from field: string status = 3;
   */
  status = "";

  /**
   * @generated from field: optional string error = 4;
   */
  error?: string;

  constructor(data?: PartialMessage<ProcessEvent_EndEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ProcessEvent.EndEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exit_code", kind: "scalar", T: 17 /* ScalarType.SINT32 */ },
    { no: 2, name: "exited", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessEvent_EndEvent {
    return new ProcessEvent_EndEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessEvent_EndEvent {
    return new ProcessEvent_EndEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessEvent_EndEvent {
    return new ProcessEvent_EndEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessEvent_EndEvent | PlainMessage<ProcessEvent_EndEvent> | undefined, b: ProcessEvent_EndEvent | PlainMessage<ProcessEvent_EndEvent> | undefined): boolean {
    return proto3.util.equals(ProcessEvent_EndEvent, a, b);
  }
}

/**
 * @generated from message process.ProcessEvent.KeepAlive
 */
export class ProcessEvent_KeepAlive extends Message<ProcessEvent_KeepAlive> {
  constructor(data?: PartialMessage<ProcessEvent_KeepAlive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ProcessEvent.KeepAlive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessEvent_KeepAlive {
    return new ProcessEvent_KeepAlive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessEvent_KeepAlive {
    return new ProcessEvent_KeepAlive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessEvent_KeepAlive {
    return new ProcessEvent_KeepAlive().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessEvent_KeepAlive | PlainMessage<ProcessEvent_KeepAlive> | undefined, b: ProcessEvent_KeepAlive | PlainMessage<ProcessEvent_KeepAlive> | undefined): boolean {
    return proto3.util.equals(ProcessEvent_KeepAlive, a, b);
  }
}

/**
 * @generated from message process.StartResponse
 */
export class StartResponse extends Message<StartResponse> {
  /**
   * @generated from field: process.ProcessEvent event = 1;
   */
  event?: ProcessEvent;

  constructor(data?: PartialMessage<StartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.StartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: ProcessEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartResponse {
    return new StartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartResponse {
    return new StartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartResponse {
    return new StartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartResponse | PlainMessage<StartResponse> | undefined, b: StartResponse | PlainMessage<StartResponse> | undefined): boolean {
    return proto3.util.equals(StartResponse, a, b);
  }
}

/**
 * @generated from message process.ConnectResponse
 */
export class ConnectResponse extends Message<ConnectResponse> {
  /**
   * @generated from field: process.ProcessEvent event = 1;
   */
  event?: ProcessEvent;

  constructor(data?: PartialMessage<ConnectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ConnectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: ProcessEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectResponse {
    return new ConnectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectResponse {
    return new ConnectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectResponse {
    return new ConnectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectResponse | PlainMessage<ConnectResponse> | undefined, b: ConnectResponse | PlainMessage<ConnectResponse> | undefined): boolean {
    return proto3.util.equals(ConnectResponse, a, b);
  }
}

/**
 * @generated from message process.SendInputRequest
 */
export class SendInputRequest extends Message<SendInputRequest> {
  /**
   * @generated from field: process.ProcessSelector process = 1;
   */
  process?: ProcessSelector;

  /**
   * @generated from field: process.ProcessInput input = 2;
   */
  input?: ProcessInput;

  constructor(data?: PartialMessage<SendInputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.SendInputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessSelector },
    { no: 2, name: "input", kind: "message", T: ProcessInput },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendInputRequest {
    return new SendInputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendInputRequest {
    return new SendInputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendInputRequest {
    return new SendInputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendInputRequest | PlainMessage<SendInputRequest> | undefined, b: SendInputRequest | PlainMessage<SendInputRequest> | undefined): boolean {
    return proto3.util.equals(SendInputRequest, a, b);
  }
}

/**
 * @generated from message process.SendInputResponse
 */
export class SendInputResponse extends Message<SendInputResponse> {
  constructor(data?: PartialMessage<SendInputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.SendInputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendInputResponse {
    return new SendInputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendInputResponse {
    return new SendInputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendInputResponse {
    return new SendInputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendInputResponse | PlainMessage<SendInputResponse> | undefined, b: SendInputResponse | PlainMessage<SendInputResponse> | undefined): boolean {
    return proto3.util.equals(SendInputResponse, a, b);
  }
}

/**
 * @generated from message process.ProcessInput
 */
export class ProcessInput extends Message<ProcessInput> {
  /**
   * @generated from oneof process.ProcessInput.input
   */
  input: {
    /**
     * @generated from field: bytes stdin = 1;
     */
    value: Uint8Array;
    case: "stdin";
  } | {
    /**
     * @generated from field: bytes pty = 2;
     */
    value: Uint8Array;
    case: "pty";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProcessInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ProcessInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stdin", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "input" },
    { no: 2, name: "pty", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "input" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessInput {
    return new ProcessInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessInput {
    return new ProcessInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessInput {
    return new ProcessInput().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessInput | PlainMessage<ProcessInput> | undefined, b: ProcessInput | PlainMessage<ProcessInput> | undefined): boolean {
    return proto3.util.equals(ProcessInput, a, b);
  }
}

/**
 * @generated from message process.StreamInputRequest
 */
export class StreamInputRequest extends Message<StreamInputRequest> {
  /**
   * @generated from oneof process.StreamInputRequest.event
   */
  event: {
    /**
     * @generated from field: process.StreamInputRequest.StartEvent start = 1;
     */
    value: StreamInputRequest_StartEvent;
    case: "start";
  } | {
    /**
     * @generated from field: process.StreamInputRequest.DataEvent data = 2;
     */
    value: StreamInputRequest_DataEvent;
    case: "data";
  } | {
    /**
     * @generated from field: process.StreamInputRequest.KeepAlive keepalive = 3;
     */
    value: StreamInputRequest_KeepAlive;
    case: "keepalive";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StreamInputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.StreamInputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: StreamInputRequest_StartEvent, oneof: "event" },
    { no: 2, name: "data", kind: "message", T: StreamInputRequest_DataEvent, oneof: "event" },
    { no: 3, name: "keepalive", kind: "message", T: StreamInputRequest_KeepAlive, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamInputRequest {
    return new StreamInputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamInputRequest {
    return new StreamInputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamInputRequest {
    return new StreamInputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamInputRequest | PlainMessage<StreamInputRequest> | undefined, b: StreamInputRequest | PlainMessage<StreamInputRequest> | undefined): boolean {
    return proto3.util.equals(StreamInputRequest, a, b);
  }
}

/**
 * @generated from message process.StreamInputRequest.StartEvent
 */
export class StreamInputRequest_StartEvent extends Message<StreamInputRequest_StartEvent> {
  /**
   * @generated from field: process.ProcessSelector process = 1;
   */
  process?: ProcessSelector;

  constructor(data?: PartialMessage<StreamInputRequest_StartEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.StreamInputRequest.StartEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessSelector },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamInputRequest_StartEvent {
    return new StreamInputRequest_StartEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamInputRequest_StartEvent {
    return new StreamInputRequest_StartEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamInputRequest_StartEvent {
    return new StreamInputRequest_StartEvent().fromJsonString(jsonString, options);
  }

  static equals(a: StreamInputRequest_StartEvent | PlainMessage<StreamInputRequest_StartEvent> | undefined, b: StreamInputRequest_StartEvent | PlainMessage<StreamInputRequest_StartEvent> | undefined): boolean {
    return proto3.util.equals(StreamInputRequest_StartEvent, a, b);
  }
}

/**
 * @generated from message process.StreamInputRequest.DataEvent
 */
export class StreamInputRequest_DataEvent extends Message<StreamInputRequest_DataEvent> {
  /**
   * @generated from field: process.ProcessInput input = 2;
   */
  input?: ProcessInput;

  constructor(data?: PartialMessage<StreamInputRequest_DataEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.StreamInputRequest.DataEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "input", kind: "message", T: ProcessInput },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamInputRequest_DataEvent {
    return new StreamInputRequest_DataEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamInputRequest_DataEvent {
    return new StreamInputRequest_DataEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamInputRequest_DataEvent {
    return new StreamInputRequest_DataEvent().fromJsonString(jsonString, options);
  }

  static equals(a: StreamInputRequest_DataEvent | PlainMessage<StreamInputRequest_DataEvent> | undefined, b: StreamInputRequest_DataEvent | PlainMessage<StreamInputRequest_DataEvent> | undefined): boolean {
    return proto3.util.equals(StreamInputRequest_DataEvent, a, b);
  }
}

/**
 * @generated from message process.StreamInputRequest.KeepAlive
 */
export class StreamInputRequest_KeepAlive extends Message<StreamInputRequest_KeepAlive> {
  constructor(data?: PartialMessage<StreamInputRequest_KeepAlive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.StreamInputRequest.KeepAlive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamInputRequest_KeepAlive {
    return new StreamInputRequest_KeepAlive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamInputRequest_KeepAlive {
    return new StreamInputRequest_KeepAlive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamInputRequest_KeepAlive {
    return new StreamInputRequest_KeepAlive().fromJsonString(jsonString, options);
  }

  static equals(a: StreamInputRequest_KeepAlive | PlainMessage<StreamInputRequest_KeepAlive> | undefined, b: StreamInputRequest_KeepAlive | PlainMessage<StreamInputRequest_KeepAlive> | undefined): boolean {
    return proto3.util.equals(StreamInputRequest_KeepAlive, a, b);
  }
}

/**
 * @generated from message process.StreamInputResponse
 */
export class StreamInputResponse extends Message<StreamInputResponse> {
  constructor(data?: PartialMessage<StreamInputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.StreamInputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamInputResponse {
    return new StreamInputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamInputResponse {
    return new StreamInputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamInputResponse {
    return new StreamInputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamInputResponse | PlainMessage<StreamInputResponse> | undefined, b: StreamInputResponse | PlainMessage<StreamInputResponse> | undefined): boolean {
    return proto3.util.equals(StreamInputResponse, a, b);
  }
}

/**
 * @generated from message process.SendSignalRequest
 */
export class SendSignalRequest extends Message<SendSignalRequest> {
  /**
   * @generated from field: process.ProcessSelector process = 1;
   */
  process?: ProcessSelector;

  /**
   * @generated from field: process.Signal signal = 2;
   */
  signal = Signal.UNSPECIFIED;

  constructor(data?: PartialMessage<SendSignalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.SendSignalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessSelector },
    { no: 2, name: "signal", kind: "enum", T: proto3.getEnumType(Signal) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendSignalRequest {
    return new SendSignalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendSignalRequest {
    return new SendSignalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendSignalRequest {
    return new SendSignalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendSignalRequest | PlainMessage<SendSignalRequest> | undefined, b: SendSignalRequest | PlainMessage<SendSignalRequest> | undefined): boolean {
    return proto3.util.equals(SendSignalRequest, a, b);
  }
}

/**
 * @generated from message process.SendSignalResponse
 */
export class SendSignalResponse extends Message<SendSignalResponse> {
  constructor(data?: PartialMessage<SendSignalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.SendSignalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendSignalResponse {
    return new SendSignalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendSignalResponse {
    return new SendSignalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendSignalResponse {
    return new SendSignalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendSignalResponse | PlainMessage<SendSignalResponse> | undefined, b: SendSignalResponse | PlainMessage<SendSignalResponse> | undefined): boolean {
    return proto3.util.equals(SendSignalResponse, a, b);
  }
}

/**
 * @generated from message process.ConnectRequest
 */
export class ConnectRequest extends Message<ConnectRequest> {
  /**
   * @generated from field: process.ProcessSelector process = 1;
   */
  process?: ProcessSelector;

  constructor(data?: PartialMessage<ConnectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ConnectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "process", kind: "message", T: ProcessSelector },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectRequest {
    return new ConnectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectRequest | PlainMessage<ConnectRequest> | undefined, b: ConnectRequest | PlainMessage<ConnectRequest> | undefined): boolean {
    return proto3.util.equals(ConnectRequest, a, b);
  }
}

/**
 * @generated from message process.ProcessSelector
 */
export class ProcessSelector extends Message<ProcessSelector> {
  /**
   * @generated from oneof process.ProcessSelector.selector
   */
  selector: {
    /**
     * @generated from field: uint32 pid = 1;
     */
    value: number;
    case: "pid";
  } | {
    /**
     * @generated from field: string tag = 2;
     */
    value: string;
    case: "tag";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProcessSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "process.ProcessSelector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pid", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "selector" },
    { no: 2, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "selector" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessSelector {
    return new ProcessSelector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessSelector {
    return new ProcessSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessSelector {
    return new ProcessSelector().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessSelector | PlainMessage<ProcessSelector> | undefined, b: ProcessSelector | PlainMessage<ProcessSelector> | undefined): boolean {
    return proto3.util.equals(ProcessSelector, a, b);
  }
}

