{
  "content": "import asyncio\r\nimport chevron\r\n\r\n# Monkey patch chevron to not escape html\r\nchevron.render.__globals__[\"_html_escape\"] = lambda string: string\r\n\r\nfrom typing import Any\r\n\r\nfrom agent.base import (\r\n    AgentInteraction,\r\n    OnLogs,\r\n    OnInteractionRequest,\r\n)\r\nfrom models.base import ModelConfig\r\nfrom agent.base import AgentBase, GetEnvs\r\n\r\nclass RewriteStepsException(Exception):\r\n    pass\r\n\r\nclass BasicAgent(AgentBase):\r\n    max_run_time = 60 * 60 * 24  # in seconds\r\n\r\n    def __init__(\r\n        self,\r\n        config: Any,\r\n        get_envs: GetEnvs,\r\n        on_logs: OnLogs,\r\n        on_interaction_request: OnInteractionRequest,\r\n    ):\r\n        super().__init__()\r\n        self._start_loop: asyncio.Task | None = None\r\n        self.get_envs = get_envs\r\n        self.config = ModelConfig(**config)\r\n        self.on_interaction_request = on_interaction_request\r\n        self.on_logs = on_logs\r\n        self.should_pause = False\r\n        self.canceled = False\r\n        self.rewriting_steps = False\r\n        self.llm_generation = None\r\n        self.can_resume = asyncio.Event()\r\n\r\n    @classmethod\r\n    async def create(\r\n        cls,\r\n        config: Any,\r\n        get_envs: GetEnvs,\r\n        on_logs: OnLogs,\r\n        on_interaction_request: OnInteractionRequest,\r\n    ):\r\n        return cls(\r\n            config,\r\n            get_envs,\r\n            on_logs,\r\n            on_interaction_request,\r\n        )\r\n\r\n    async def interaction(self, interaction: AgentInteraction):\r\n        print(\"Agent interaction\")\r\n        match interaction.type:\r\n            case \"pause\":\r\n                # TODO: Implement\r\n                pass\r\n            case \"resume\":\r\n                # TODO: Implement\r\n                pass\r\n            case \"start\":\r\n                # TODO: Implement\r\n                pass\r\n            case \"rewrite_steps\":\r\n                # TODO: Implement\r\n                pass\r\n            case _:\r\n                raise Exception(f\"Unknown interaction action: {interaction.type}\")\r\n\r\n    async def stop(self):\r\n        print(\"Cancel agent run\")\r\n        self.canceled = True\r\n        if self.llm_generation:\r\n            self.llm_generation.cancel()\r\n        if self._start_loop:\r\n            self._start_loop.cancel()\r\n"
}