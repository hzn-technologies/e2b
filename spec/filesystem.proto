syntax = "proto3";

import "google/protobuf/empty.proto";
import "permissions.proto";

option go_package = "github.com/e2b-dev/infra/packages/envd/spec";

package filesystem;

service Filesystem {
    rpc Stat(StatRequest) returns (StatResponse);
    
    rpc CreateFile(CreateFileRequest) returns (google.protobuf.Empty);
    rpc ReadFile(ReadFileRequest) returns (stream ReadFileResponse);
    rpc WriteFile(WriteFileRequest) returns (google.protobuf.Empty);

    rpc MakeDir(MakeDirRequest) returns (google.protobuf.Empty);
    rpc ReadDir(ReadDirRequest) returns (ReadDirResponse);
    
    rpc CreateLink(CreateLinkRequest) returns (google.protobuf.Empty);
    rpc CreateSymlink(CreateSymlinkRequest) returns (google.protobuf.Empty);

    rpc Watch(WatchRequest) returns (stream FilesystemEvent);
    rpc Rename(MoveRequest) returns (google.protobuf.Empty);
    rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

    rpc Chmod(ChmodRequest) returns (google.protobuf.Empty);
    rpc Chown(ChownRequest) returns (google.protobuf.Empty);

    rpc Copy(CopyRequest) returns (google.protobuf.Empty);
}

message CreateFileRequest {
    string path = 1;
    bool create_parents = 2;
    
    permissions.AccessControl access = 3;
}

message MakeDirRequest {
    string path = 1;
    bool create_parents = 2;
    uint32 mode = 3;

    permissions.AccessControl access = 4;
}

message CreateLinkRequest {
    string source = 1;
    string destination = 2;
    permissions.AccessControl access = 3;
}

message CreateSymlinkRequest {
    string source = 1;
    string destination = 2;
    permissions.AccessControl access = 3;
}

message CopyRequest {
    string source = 1;
    string destination = 2;
    bool recursive = 3;
    permissions.AccessControl access = 4;
}

message ChmodRequest {
    string path = 1;
    uint32 mode = 2;
    permissions.AccessControl access = 3;
}

message ChownRequest {
    string path = 1;
    uint32 uid = 2;
    uint32 gid = 3;
    permissions.AccessControl access = 4;
}

message ReadFileRequest {
    string path = 1;

    // If specified, the file is read from the given byte offset.
    optional uint64 offset = 3;
    // If specified, the file is read up to this many bytes.
    optional uint64 length = 4;

    permissions.AccessControl access = 5;
}

message ReadFileResponse {
    bytes data = 1;
}

message StatRequest {
    string path = 1;
    permissions.AccessControl access = 2;
}

message StatResponse {
    EntryInfo entry = 1;
}

message WriteFileRequest {
    string path = 1;
    bytes data = 2;

    bool create_if_not_exists = 3;
    bool append = 4;

    // If specified, the file is written at the given byte offset.
    optional uint64 offset = 5;
    // If specified, the new data overwrites the existing data with this length at the given byte offset.
    optional uint64 length = 6;

    permissions.AccessControl access = 7;
}

message RemoveRequest {
    string path = 1;
    bool all = 2;
    permissions.AccessControl access = 3;
}

message MoveRequest {
    string source = 1;
    string destination = 2;
    permissions.AccessControl access = 3;
}

message EntryInfo {
    string name = 1;
    FileType type = 2;
    uint32 mode = 3;
    uint64 size = 4;
    uint64 last_modified = 5;
    permissions.AccessControl owner = 6;
}

message ReadDirRequest {
    string path = 1;
    permissions.AccessControl access = 2;
}

message ReadDirResponse {
    repeated EntryInfo entries = 1;
}

message WatchRequest {
    string path = 1;
    permissions.AccessControl access = 2;
}

enum FileType {
    UNKNOWN_FileType = 0;
    FILE = 1;
    DIRECTORY = 2;
    LINK = 3;
    SYMLINK = 4;
}

enum EventType {
    UNKNOWN_EventType = 0;
    CREATE = 1;
    WRITE = 2;
    REMOVE = 3;
    RENAME = 4;
    CHMOD = 5;
}

message FilesystemEvent {
    string path = 1;
    EventType type = 2;
    EntryInfo entry = 3;
}
