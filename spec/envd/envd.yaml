openapi: 3.0.0
info:
  title: envd
  version: 0.1.0
  description: API for managing files' content and controlling envd

tags:
  - name: files

paths:
  /sync:
    post:
      summary: Ensure the time and metadata is synced with the host
      responses:
        204:
          description: The time and metadata is synced with the host

  /files/{path}:
    get:
      summary: Download a file
      tags: [files]
      parameters:
        - $ref: "#/components/parameters/FilePath"
        - $ref: "#/components/parameters/User"
      responses:
        200:
          $ref: "#/components/responses/DownloadSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/DirectoryPathError"
        404:
          $ref: "#/components/responses/FileNotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Upload a file and ensure the parent directories exist. If the file exists, it will be overwritten.
      tags: [files]
      parameters:
        - $ref: "#/components/parameters/FilePath"
        - $ref: "#/components/parameters/User"
      requestBody:
        $ref: "#/components/requestBodies/File"
      responses:
        200:
          $ref: "#/components/responses/ExistingFileUploadSuccess"
        201:
          $ref: "#/components/responses/NewFileUploadSuccess"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/DirectoryPathError"
        500:
          $ref: "#/components/responses/InternalServerError"
        507:
          $ref: "#/components/responses/NotEnoughDiskSpace"

components:
  parameters:
    FilePath:
      name: path
      in: path
      required: true
      allowEmptyValue: true
      description: Path to the file, URL encoded. Can be relative to user's home directory.
      schema:
        type: string
    User:
      name: username
      in: query
      required: true
      description: User used for setting the owner, or resolving relative paths.
      schema:
        type: string
        pattern: "^(root|user)$"

  requestBodies:
    File:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary

  responses:
    ExistingFileUploadSuccess:
      description: The file was updated successfully.
    NewFileUploadSuccess:
      description: The file was created successfully.
    DownloadSuccess:
      description: Entire file downloaded successfully.
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
            description: The file content
    DirectoryPathError:
      description: Directory path error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    FileNotFound:
      description: File not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotEnoughDiskSpace:
      description: Not enough disk space
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Error:
      required:
        - message
        - code
      properties:
        message:
          type: string
          description: Error message
        code:
          type: integer
          description: Error code
